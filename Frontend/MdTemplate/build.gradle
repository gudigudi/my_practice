apply from: "config.gradle"

buildscript {
    repositories {
        google()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
        jcenter()
        maven { url "https://jitpack.io" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.2'
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:2.2.1"
        classpath "androidx.benchmark:benchmark-gradle-plugin:1.0.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.61"
    }
}

allprojects {
    repositories {
        google()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
        jcenter()
        maven { url "https://jitpack.io" }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


// 声明buildProperty
ext.buildProperty = null
ext.appReleaseDir = ''

def loadProperties() {
    def proFile = file("gradle-build.properties")
    Properties p = new Properties()
    proFile.withInputStream { stream ->
        p.load(stream)
    }
    buildProperty = p
    appReleaseDir = p.appReleaseDir
}

def getInstrumentation(){
    project.hasProperty('cucumber') ? "cucumber.cukeulator.test.CukeulatorAndroidJUnitRunner" :"androidx.test.runner.AndroidJUnitRunner"
}

subprojects {
    afterEvaluate {
        ext.pluginContainer = project.getPlugins()

        android {
            def app = rootProject.ext.android

            compileSdkVersion app.compileSdkVersion

            defaultConfig {
                minSdkVersion app.minSdkVersion
                targetSdkVersion app.targetSdkVersion
                versionCode app.versionCode
                versionName app.versionName
                multiDexEnabled true

                vectorDrawables.useSupportLibrary = true

                testInstrumentationRunner getInstrumentation()

                manifestPlaceholders = [hostName: "www.example.com"]

                javaCompileOptions {
                    annotationProcessorOptions {
                        arguments = [
                                "room.schemaLocation"  : "$projectDir/schemas".toString(),
                                "room.incremental"     : "true",
                                "room.expandProjection": "true"]
                    }
                }
            }

            loadProperties()//调用方法
            signingConfigs {
                debug {
                    keyAlias buildProperty.keyAlias
                    keyPassword buildProperty.keyPassword
                    storeFile file(buildProperty.storeFile)
                    storePassword buildProperty.storePassword
                }
                release {
                    keyAlias buildProperty.keyAlias
                    keyPassword buildProperty.keyPassword
                    storeFile file(buildProperty.storeFile)
                    storePassword buildProperty.storePassword
                }
            }

            buildTypes {
                debug {
                    buildConfigField "boolean", "LOG_DEBUG", buildProperty.debug_LOG_DEBUG
                    buildConfigField "boolean", "isDev", buildProperty.debug_isDev
                    buildConfigField "String", "versionNameSuffix", buildProperty.debug_versionNameSuffix

                    minifyEnabled Boolean.parseBoolean(buildProperty.debug_minifyEnabled)
                    zipAlignEnabled Boolean.parseBoolean(buildProperty.debug_zipAlignEnabled)
                    shrinkResources Boolean.parseBoolean(buildProperty.debug_shrinkResources)

                    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                    signingConfig signingConfigs.debug

                    splits.abi.enable = false
                    splits.density.enable = false
                    aaptOptions.cruncherEnabled = false
                    ext.enableCrashlytics = false
                    proguardFiles fileTree(dir: "${project.rootProject.rootDir}/proguards", include: ['*.pro']).asList().toArray()

                    testCoverageEnabled = false // Breaks Kotlin compiler.
                }
                release {
                    buildConfigField "boolean", "LOG_DEBUG", buildProperty.release_LOG_DEBUG
                    buildConfigField "boolean", "isDev", buildProperty.release_isDev
                    buildConfigField "String", "versionNameSuffix", buildProperty.release_versionNameSuffix
                    minifyEnabled Boolean.parseBoolean(buildProperty.release_minifyEnabled)
                    zipAlignEnabled Boolean.parseBoolean(buildProperty.release_zipAlignEnabled)
                    shrinkResources Boolean.parseBoolean(buildProperty.release_shrinkResources)
                    signingConfig signingConfigs.release

                    debuggable false
                    jniDebuggable false
                    renderscriptDebuggable false
                    pseudoLocalesEnabled false
                    generatePureSplits false
                    splits {
                        abi {
                            enable true
                            reset()
//                            include "x86", "x86_64", "armabi", "armeabi-v7a", "arm64-v8a"
                            include "armabi"
                            universalApk false
                        }
                        density {
                            enable = false
//                            enable = true
//                            exclude "mdpi", "hdpi", "xhdpi", "xxhdpi", "xxxhdpi"
//                            compatibleScreens "small", "normal", "large", "xlarge"
                        }
                    }

                    if (project.pluginContainer.hasPlugin("com.android.application")) {
                        //批量修改Apk名字
                        applicationVariants.all {
                            //判断是release还是debug版本
                            def buildType = it.buildType.name
                            def fileName
                            //下面的channel是获取渠道号，你获取渠道号不一定会和我的代码一样，因为有可能你的渠道名称的规则和我的不一样，我的规则是${渠道名}-${applicationId}
                            def channel = it.productFlavors[0].name.split("-")[0]
                            //获取当前时间的"YYYY-MM-dd"格式。
                            def createTime = new Date().format("YYYY-MM-dd-HH:mm:ss", TimeZone.getTimeZone("GMT+08:00"))
                            //只对Release包起作用，如果不是Release包则不变更输出路径，否则可能导致AS无法自动安装debug包。
                            if (buildType == "release") {
                                getPackageApplicationProvider().get().outputDirectory = new File(project.rootDir.absolutePath + "/apks")

                                //命名规则是：渠道名_项目名_版本名_创建时间_构建类型.apk
                                //将名字打印出来，以便及时查看是否满意
                                getPackageApplicationProvider().get().outputScope.apkDatas.forEach { apkData ->
                                    fileName = ((project.name != "app") ? project.name : rootProject.name) + "-" + "${channel}_${defaultConfig.applicationId}_${defaultConfig.versionName}_${createTime}-${buildType}.apk"
                                    println "文件名：-----------------${fileName}"
                                    apkData.outputFileName = fileName
                                }
                            }
                        }
                    }
                    proguardFiles fileTree(dir: "${project.rootProject.rootDir}/proguards", include: ['*.pro']).asList().toArray()
                }
            }
            // Android Studio 4.0+
//            buildFeatures {
//                viewBinding = true
//            }
            viewBinding {
                enabled = true
            }

            testOptions {
                unitTests {
                    includeAndroidResources = true
                    returnDefaultValues = true
                }
            }
            compileOptions {
                encoding = "utf-8"
                sourceCompatibility = JavaVersion.VERSION_1_8
                targetCompatibility = JavaVersion.VERSION_1_8
            }
            dexOptions {
                preDexLibraries true
            }

            // application专用配置
            if (project.name.contains('app')) {
                flavorDimensions "manifestPlaceholders"
                productFlavors {//配置渠道包或者版本包
                    playStore {}
                    miui {}
                }
                productFlavors.all { flavors ->
                    flavors.manifestPlaceholders = [channelValue: name]
                }
            }

            packagingOptions {
                exclude 'META-INF/DEPENDENCIES'
                exclude 'META-INF/LICENSE'
                exclude 'META-INF/LICENSE.txt'
                exclude 'META-INF/LICENSE.md'
                exclude 'META-INF/LICENSE-notice.md'
                exclude 'META-INF/license.txt'
                exclude 'META-INF/NOTICE'
                exclude 'META-INF/NOTICE.txt'
                exclude 'META-INF/notice.txt'
                exclude 'META-INF/ASL2.0'
            }
        }

        dependencies {
            def app = rootProject.ext.dependencies
            def androidx = app.androidx

            implementation fileTree(dir: 'libs', include: ['*.jar'])

            implementation app.kotlin_stdlib

            // AndroidX Test
            androidTestImplementation androidx.test.core
            androidTestImplementation androidx.test.runner
            androidTestImplementation androidx.test.rules
            androidTestImplementation androidx.test.monitor
            androidTestImplementation androidx.test.ext.junit
            androidTestImplementation androidx.test.ext.truth

            // Espresso
            androidTestImplementation androidx.test.espresso.core
            androidTestImplementation androidx.test.espresso.contrib
            androidTestImplementation androidx.test.espresso.intents
            androidTestImplementation androidx.test.espresso.accessibility
            androidTestImplementation androidx.test.espresso.web
            androidTestImplementation androidx.test.espresso.idling_concurrent
            androidTestImplementation androidx.test.espresso.idling_resource
            implementation androidx.test.espresso.idling_resource

            // AndroidX support
            implementation androidx.activity
            implementation androidx.appcompat
            implementation androidx.appcompat_resources
            implementation androidx.core, androidx.core_ktx
            implementation androidx.arch.core.runtime
            implementation androidx.arch.core.common
            implementation androidx.annotation
            implementation androidx.collection
            implementation androidx.legacy_support_v4
            implementation androidx.preference
            implementation androidx.multidex
            implementation androidx.fragment, androidx.fragment_ktx, androidx.fragment_testing

            // View & Layout
            implementation androidx.palette
            implementation androidx.cardview
            implementation androidx.recyclerview
            implementation androidx.constraintlayout
            implementation androidx.swiperefreshlayout
            implementation androidx.material
            implementation androidx.viewpager2
            implementation androidx.transition

            // Lifecycle
            implementation androidx.lifecycle.extensions, androidx.lifecycle.viewmodel_ktx, androidx.lifecycle.livedata_ktx
            implementation androidx.lifecycle.common_java8
            testImplementation androidx.arch.core.testing

            // Room
            implementation androidx.room.runtime
            annotationProcessor androidx.room.compiler
            testImplementation androidx.room.testing

            // Paging
            implementation androidx.paging.runtime
            testImplementation androidx.paging.common

            // WorkManager
            implementation androidx.work.runtime
            androidTestImplementation androidx.work.testing

            // Navigation
            implementation androidx.navigation.fragment
            implementation androidx.navigation.ui

            // Lombok
            compileOnly app.lombok
            annotationProcessor app.lombok

            // Dagger2
            implementation app.dagger.android
            implementation app.dagger.android_support
            implementation app.dagger.dagger

            annotationProcessor app.dagger.compiler

            annotationProcessor app.dagger.android_processor

            // Glide
            implementation app.glide.glide
            annotationProcessor app.glide.compiler
            implementation app.glide.okhttp3_integration

            // Retrofit2
            implementation app.retrofit2.retrofit
            implementation app.retrofit2.converter_gson

            // Log
            implementation 'org.slf4j:slf4j-api:1.7.30'
            implementation 'com.github.tony19:logback-android:2.0.0'

            // Android Util
            implementation "com.blankj:utilcodex:1.26.0"

            // Gson
            implementation "com.google.code.gson:gson:2.8.6"

            // Okhttp
            implementation "com.squareup.okhttp3:okhttp:4.4.1"
            testImplementation "com.squareup.okhttp3:mockwebserver:4.4.1"

            // Leak canary
            debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.2'
            androidTestImplementation "com.squareup.leakcanary:leakcanary-android-instrumentation:2.2"

            // Junit5
            def test = app.test

            testImplementation test.junit.jupiter_api
            testRuntimeOnly test.junit.jupiter_engine
            testImplementation test.junit.jupiter_params
            testImplementation test.mockito
            testImplementation test.assertj
        }
    }
}
